{
    "additionDate": "2024-04-08T08:13:36.799052Z",
    "biotoolsCURIE": "biotools:pypept",
    "biotoolsID": "pypept",
    "confidence_flag": "tool",
    "cost": "Free of charge",
    "credit": [
        {
            "email": "thomas.fox@boehringer-ingelheim.com",
            "name": "Thomas Fox",
            "typeEntity": "Person"
        }
    ],
    "description": "Python library to generate atomistic 2D and 3D representations of peptides.",
    "editPermission": {
        "type": "public"
    },
    "function": [
        {
            "operation": [
                {
                    "term": "Sequence assembly",
                    "uri": "http://edamontology.org/operation_0310"
                },
                {
                    "term": "Simulation analysis",
                    "uri": "http://edamontology.org/operation_0244"
                },
                {
                    "term": "Small molecule design",
                    "uri": "http://edamontology.org/operation_4009"
                }
            ]
        }
    ],
    "homepage": "https://github.com/Boehringer-Ingelheim/pyPept",
    "language": [
        "Python"
    ],
    "lastUpdate": "2024-04-08T08:13:36.801481Z",
    "license": "MIT",
    "name": "pyPept",
    "operatingSystem": [
        "Linux",
        "Mac",
        "Windows"
    ],
    "owner": "Pub2Tools",
    "publication": [
        {
            "doi": "10.1186/S13321-023-00748-2",
            "metadata": {
                "abstract": "We present pyPept, a set of executables and underlying python-language classes to easily create, manipulate, and analyze peptide molecules using the FASTA, HELM, or recently-developed BILN notations. The framework enables the analysis of both pure proteinogenic peptides as well as those with non-natural amino acids, including support to assemble a customizable monomer library, without requiring programming. From line notations, a peptide is transformed into a molecular graph for 2D depiction tasks, the calculation of physicochemical properties, and other systematic analyses or processing pipelines. The package includes a module to rapidly generate approximate peptide conformers by incorporating secondary structure restraints either given by the user or predicted via pyPept, and a wrapper tool is also provided to automate the generation and output of 2D and 3D representations of a peptide directly from the line notation. HELM and BILN notations that include circular, branched, or stapled peptides are fully supported, eliminating errors in structure creation that are prone during manual drawing and connecting. The framework and common workflows followed in pyPept are described together with illustrative examples. pyPept has been released at: https://github.com/Boehringer-Ingelheim/pyPept . Graphical Abstract: [Figure not available: see fulltext.].",
                "authors": [
                    {
                        "name": "Brown J.B."
                    },
                    {
                        "name": "Fox T."
                    },
                    {
                        "name": "Ochoa R."
                    }
                ],
                "citationCount": 1,
                "date": "2023-12-01T00:00:00Z",
                "journal": "Journal of Cheminformatics",
                "title": "pyPept: a python library to generate atomistic 2D and 3D representations of peptides"
            },
            "pmcid": "PMC10498622",
            "pmid": "37700347"
        }
    ],
    "toolType": [
        "Library"
    ],
    "topic": [
        {
            "term": "Cheminformatics",
            "uri": "http://edamontology.org/topic_2258"
        },
        {
            "term": "Medicinal chemistry",
            "uri": "http://edamontology.org/topic_0209"
        },
        {
            "term": "Molecular biology",
            "uri": "http://edamontology.org/topic_3047"
        },
        {
            "term": "Small molecules",
            "uri": "http://edamontology.org/topic_0154"
        },
        {
            "term": "Workflows",
            "uri": "http://edamontology.org/topic_0769"
        }
    ]
}
